{"version":3,"sources":["components/Fieldset.js","components/CreateBlogPost.js","components/CreateBlogPostModal.js","components/Header.js","components/BlogPost.js","components/BlogsList.js","components/EditBlogPost.js","App.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["Fieldset","name","label","rest","className","htmlFor","id","component","CreateBlogPost","initialValues","action","inputRef","useRef","dispatch","useDispatch","editId","useSelector","state","blogPosts","find","post","title","Category","author","ImageURL","Description","validationSchema","Yup","shape","required","handleOnSubmit","values","a","resetForm","axios","then","response","type","payload","data","catch","error","console","log","put","setFocus","current","focus","onSubmit","onReset","e","render","isSubmitting","handleReset","innerRef","placeholder","disabled","onClick","CreateBlogPostModal","show","showBlogPostPopup","handleClose","Modal","onHide","Header","closeButton","Body","Footer","Button","variant","Navbar","collapseOnSelect","expand","bg","Brand","as","NavLink","to","Toggle","aria-controls","Collapse","Nav","Link","exact","BlogPost","Card","src","alt","data-toggle","handleOnEditClick","defaultProps","BlogsList","useEffect","getPosts","get","map","key","EditBlogPost","App","path","Boolean","window","location","hostname","match","initialState","middlewares","thunk","store","createStore","blogPostList","item","applyMiddleware","subscribe","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3ba857d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nexport function Fieldset({ name, label, ...rest }) {\r\n\treturn (\r\n\t\t<div className=\"form-group\">\r\n\t\t\t<label className=\"mb-0 small text-uppercase text-primary\" htmlFor={name}>\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t\t<Field id={name} name={name} className=\"form-control\" {...rest} />\r\n\t\t\t<ErrorMessage name={name} className=\"text-danger small\" component=\"div\" />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { Fieldset } from './Fieldset';\r\n\r\nconst CreateBlogPost = () => {\r\n\tconst inputRef = useRef(null);\r\n\tconst dispatch = useDispatch();\r\n\tconst editId = useSelector(state => state.editId);\r\n\tconst blogPosts = useSelector(state => state.blogPosts);\r\n\r\n\tlet initialValues;\r\n\tlet action;\r\n\r\n\tif (editId) {\r\n\t\tconst selectedBlogPost = blogPosts.find(post => post.id === editId);\r\n\t\tinitialValues = selectedBlogPost;\r\n\t\taction = 'PUT';\r\n\t} else {\r\n\t\tinitialValues = {\r\n\t\t\ttitle: '',\r\n\t\t\tCategory: '',\r\n\t\t\tauthor: '',\r\n\t\t\tImageURL: '',\r\n\t\t\tDescription: ''\r\n\t\t};\r\n\t\taction = 'POST';\r\n\t}\r\n\r\n\tconst validationSchema = Yup.object().shape({\r\n\t\ttitle: Yup.string().required('Title required'),\r\n\t\tCategory: Yup.string().required('Category required'),\r\n\t\tauthor: Yup.string().required('Author required')\r\n\t});\r\n\r\n\tconst handleOnSubmit = async (values, { resetForm }) => {\r\n\t\tif (action === 'POST') {\r\n\t\t\tawait axios\r\n\t\t\t\t.post(\r\n\t\t\t\t\t`https://my-json-server.typicode.com/Srinivasan47/mockjson/posts`,\r\n\t\t\t\t\tvalues\r\n\t\t\t\t)\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\tdispatch({ type: 'ADD_BLOG_POST', payload: response.data });\r\n\t\t\t\t\t// handle success\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\t// handle error\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t} else if (action === 'PUT') {\r\n\t\t\tawait axios\r\n\t\t\t\t.put(\r\n\t\t\t\t\t`https://my-json-server.typicode.com/Srinivasan47/mockjson/posts/${values.id}`,\r\n\t\t\t\t\tvalues\r\n\t\t\t\t)\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\tdispatch({ type: 'UPDATE_BLOG_POST', payload: response.data });\r\n\t\t\t\t\t// handle success\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\t// handle error\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t\tdispatch({ type: 'SHOW_BLOG_POST_POPUP', payload: false });\r\n\t\t\tdispatch({ type: 'EDIT_BLOG_POST', payload: null });\r\n\t\t}\r\n\t\tresetForm();\r\n\t};\r\n\r\n\tconst handleOnReset = e => {\r\n\t\tconsole.log('handleOnReset', e);\r\n\t\tsetFocus();\r\n\t};\r\n\r\n\tconst setFocus = () => {\r\n\t\tinputRef.current.focus();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"my-3 text-center\">Add new blog post</h3>\r\n\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={initialValues}\r\n\t\t\t\tvalidationSchema={validationSchema}\r\n\t\t\t\tonSubmit={handleOnSubmit}\r\n\t\t\t\tonReset={handleOnReset}\r\n\t\t\t\trender={({ isSubmitting, handleReset }) => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Fieldset\r\n\t\t\t\t\t\t\tinnerRef={inputRef}\r\n\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\tlabel=\"Title\"\r\n\t\t\t\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Fieldset name=\"Category\" label=\"Category\" placeholder=\"Category\" />\r\n\t\t\t\t\t\t<Fieldset name=\"author\" label=\"Author\" placeholder=\"Author\" />\r\n\t\t\t\t\t\t<Fieldset name=\"ImageURL\" label=\"ImageURL\" placeholder=\"ImageURL\" />\r\n\t\t\t\t\t\t<Fieldset\r\n\t\t\t\t\t\t\tname=\"Description\"\r\n\t\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary mr-3\">\r\n\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"reset\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\r\n\t\t\t\t\t\t\tdisabled={isSubmitting}\r\n\t\t\t\t\t\t\tonClick={handleReset}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default CreateBlogPost;\r\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreateBlogPost from './CreateBlogPost';\n\nexport default function CreateBlogPostModal() {\n\tconst dispatch = useDispatch();\n\tconst show = useSelector(state => state.showBlogPostPopup);\n\n\tfunction handleClose() {\n\t\tdispatch({ type: 'SHOW_BLOG_POST_POPUP', payload: false });\n\t\tdispatch({ type: 'EDIT_BLOG_POST', payload: null });\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Modal show={show} onHide={handleClose}>\n\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t{/* <Modal.Title>Modal heading</Modal.Title> */}\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<CreateBlogPost />\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant=\"secondary\" onClick={handleClose}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n","import React, { useState } from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useDispatch } from 'react-redux';\r\nimport CreateBlogPostModal from './CreateBlogPostModal';\r\n\r\nfunction Header() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tfunction handleShow() {\r\n\t\tdispatch({ type: 'SHOW_BLOG_POST_POPUP', payload: true });\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Navbar\r\n\t\t\tcollapseOnSelect\r\n\t\t\texpand=\"lg\"\r\n\t\t\tbg=\"light\"\r\n\t\t\tvariant=\"light\"\r\n\t\t\tclassName=\"mb-3\"\r\n\t\t>\r\n\t\t\t<Navbar.Brand as={NavLink} to=\"/\">\r\n\t\t\t\tBlog\r\n\t\t\t</Navbar.Brand>\r\n\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\r\n\t\t\t\t<Nav className=\"mr-auto\">\r\n\t\t\t\t\t<Nav.Link exact as={NavLink} to=\"/\">\r\n\t\t\t\t\t\tBlog List\r\n\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t{/* <Nav.Link as={NavLink} to=\"/add\">\r\n\t\t\t\t\t\tAdd new post\r\n\t\t\t\t\t</Nav.Link> */}\r\n\t\t\t\t\t<Button variant=\"primary\" onClick={handleShow}>\r\n\t\t\t\t\t\tAdd new post\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Navbar.Collapse>\r\n\t\t\t<CreateBlogPostModal />\r\n\t\t</Navbar>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Card } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\n\nfunction BlogPost({ Category, title, ImageURL, author, Description, id }) {\n\tconst dispatch = useDispatch();\n\n\tfunction handleOnEditClick(id) {\n\t\tdispatch({ type: 'EDIT_BLOG_POST', payload: id });\n\t\tdispatch({ type: 'SHOW_BLOG_POST_POPUP', payload: true });\n\t}\n\n\treturn (\n\t\t<Card className=\"mb-5\">\n\t\t\t<Card.Body>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-3\">\n\t\t\t\t\t\t<img src={ImageURL} alt={Category} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-9\">\n\t\t\t\t\t\t<h4>{title}</h4>\n\t\t\t\t\t\t<div>{Description}</div>\n\t\t\t\t\t\t<div className=\"d-flex justify-content-between my-2\">\n\t\t\t\t\t\t\t<div className=\"d-flex justify-content-start\">\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName=\"badge badge-warning mr-2\"\n\t\t\t\t\t\t\t\t\tdata-toggle=\"tooltip\"\n\t\t\t\t\t\t\t\t\ttitle=\"Category\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{Category}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName=\"badge badge-info\"\n\t\t\t\t\t\t\t\t\tdata-toggle=\"tooltip\"\n\t\t\t\t\t\t\t\t\ttitle=\"Author name\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{author}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* <div>\n\t\t\t\t\t\t\t<Link to={`/edit/${id}`}>Edit</Link>\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"p-0\"\n\t\t\t\t\t\t\t\tonClick={() => handleOnEditClick(id)}\n\t\t\t\t\t\t\t\tvariant=\"link\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n}\n\nBlogPost.defaultProps = {\n\tCategory: '',\n\ttitle: '',\n\tImageURL: '',\n\tauthor: '',\n\tDescription: ''\n};\n\nBlogPost.propTypes = {\n\tCategory: PropTypes.string,\n\ttitle: PropTypes.string,\n\tImageURL: PropTypes.string,\n\tauthor: PropTypes.string,\n\tDescription: PropTypes.string\n};\n\nexport default BlogPost;\n","import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport BlogPost from './BlogPost';\r\n\r\nexport default function BlogsList() {\r\n\tconst dispatch = useDispatch();\r\n\tconst blogPosts = useSelector(state => state.blogPosts);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetPosts();\r\n\t}, []);\r\n\r\n\tconst getPosts = () => {\r\n\t\t// setLoader(true);\r\n\t\taxios\r\n\t\t\t.get(`https://my-json-server.typicode.com/Srinivasan47/mockjson/posts`)\r\n\t\t\t.then(response => {\r\n\t\t\t\tdispatch({ type: 'LIST_BLOG_POSTS', payload: response.data });\r\n\t\t\t\t// handle success\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\t// handle error\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"container-fluid\">\r\n\t\t\t{blogPosts && blogPosts.map(post => <BlogPost key={post.id} {...post} />)}\r\n\t\t</section>\r\n\t);\r\n}\r\n","import React, { useEffect } from 'react';\r\n\r\nexport default function EditBlogPost() {\r\n\tuseEffect(() => {\r\n\t\t// get particular dat\r\n\t}, []);\r\n\r\n\treturn <div>EditBlogPost</div>;\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport BlogsList from './components/BlogsList';\nimport EditBlogPost from './components/EditBlogPost';\nimport CreateBlogPost from './components/CreateBlogPost';\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Router>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/edit/:id\">\n\t\t\t\t\t\t<EditBlogPost />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/add\">\n\t\t\t\t\t\t<div className=\"row d-flex justify-content-center\">\n\t\t\t\t\t\t\t<div className=\"col-4\">\n\t\t\t\t\t\t\t\t<CreateBlogPost />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<BlogsList />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n\tblogPosts: [],\r\n\teditId: null,\r\n\tshowBlogPostPopup: false\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n\tif (action.type === 'LIST_BLOG_POSTS') {\r\n\t\treturn { ...state, blogPosts: action.payload };\r\n\t} else if (action.type === 'ADD_BLOG_POST') {\r\n\t\treturn { ...state, blogPosts: [...state.blogPosts, action.payload] };\r\n\t} else if (action.type === 'UPDATE_BLOG_POST') {\r\n\t\tconst blogPostList = state.blogPosts.map(item => {\r\n\t\t\tif (item.id === action.payload.id) {\r\n\t\t\t\treturn action.payload;\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\treturn { ...state, blogPosts: blogPostList };\r\n\t} else if (action.type === 'EDIT_BLOG_POST') {\r\n\t\treturn { ...state, editId: action.payload };\r\n\t} else if (action.type === 'SHOW_BLOG_POST_POPUP') {\r\n\t\treturn { ...state, showBlogPostPopup: action.payload };\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\nconst middlewares = [thunk];\r\n\r\n// STORE\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(...middlewares)\r\n);\r\n\r\nstore.subscribe(()=>{\r\n    console.log(store.getState());\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}